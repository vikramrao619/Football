a
b
b
a <- 5
a
a
setwd("~/GSCHOOL/Job Market Preparation/Self Teaching/Projects/R Projects")
a
b
a
b
getwd
getwd()
a <- 1
b <- 1:10
a
b
a <- 1
b <- 1:10
a
b
library(car)
library("lattice", lib.loc="C:/Program Files/R/R-2.13.2/library")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/2.13")
update.packages()
y
install.packages('knitr', dependencies = TRUE)
library(knitr)
a = 5
a
mode(a)
typeof(a)
print (a = c("aa", "cc", "ddd", "1234"))
a = c("aa", "cc", "ddd", "1234")
a
print a
print (a <- c("aa", "cc", "ddd", "1234"))
a[4]
as.character(1:5)
paste("aa", "bb")
paste("aa", "bb", sep="")
letters
month.abb
month.name
x <- 3
f <- function (x) {x <- 5; return (x)}
f(x)
x
g <- function (x) {x <<- 5; return(x)}
g(x)
a <- function() x<-1
a()
x
a<-function() x<<-1
a()
x
assign ("f", function (x) 2*x)
f
get(f)
get(x)
x
get("x")
TRUE
typeof(TRUE)
print ("hello world")
df(8.983, 3, 26)
c <- 8.983, 5
c <- [8.983, 5]
c <- ([)8.983, 5)
c <- (8.983, 5)
a <- c(8.983, 5)
df(a, 3, 26)
pf(8.983, 3, 26)
1-pf(8.983, 3, 26)
qtukey(.995, df = 26, nranges = 4)
qtukey(.995, 7, df = 26, nranges = 4)
qtukey(.995, 7.5, df = 26, nranges = 4)
qtukey(.995, 5, df = 26, nranges = 4)
qtukey(.995, 5, df = 26, nranges = 4)
qtukey(.995, 26, 4)
qtukey(.99, 26, 4)
qtukey(1-.01, 4, 26)
1 - dt(4.756, 28)
dt(4.756, 28)
dt(4.756, 28) * 2
PackingMachine <- read.table("~/GSCHOOL/Classes/Stats C225/Homework/Homework 1/PackingMachine.dat", header=TRUE, quote="\"")
View(PackingMachine)
PackingMachine <- read.table("~/GSCHOOL/Classes/Stats C225/Homework/Homework 1/PackingMachine.dat", header=TRUE, quote="\"")
View(PackingMachine)
attach(PackingMachine)
M.C1
boxplot(PackingMachine, ylab="Measured Weight", xlab="Machine")
title("Hello")
boxplot(PackingMachine, ylab="Measured Weight",
xlab = "Machine")
title("Boxplot of Weighing Machines")
mean(PackingMachine)
stpackingmachine <- stack(packingmachine)
names(stpackingmachine) <- c("weight", "machine")
stpackingmachine <- stack(packingmachine)
stpackingmachine <- stack(PackingMachine)
names(stpackingmachine) <- c("weight", "machine")
stpackingmachine
av1 <- aov(weight ~ machine, data = stpackingmachine)
summary av1
summary(av1)
tukey <- TukeyHSD(anova)
anova <- aov(weight ~ machine, data = stpackingmachine)
tukey <- TukeyHSD(anova)
tukey
plot(tukey)
anova
type(anova)
anova.type
anova.type()
typeof(anova)
plot(anova)
aov
anova
av1
summary(anova)
PackingMachine
stpackingmachine
mean(stpackingmachine)
mean(PackingMachine)
summary(anova)
qt(1-(.05/12), 16)
qtukey(1-.05, 4, 20)
qtukey(1-.025, 4, 20)
qtukey(1-.05, 4, 16)
pnorm(1.95)
pf(8.98, 3, 26)
1 - pf(8.98, 3, 26)
boxplot(PackingMachine, ylab="Measured Weight",
xlab = "Machine")
title("Boxplot of Weighing Machines")
stpackingmachine <- stack(PackingMachine)
names(stpackingmachine) <- c("weight", "machine")
anova <- aov(weight ~ machine, data = stpackingmachine)
summary(anova)
tukey <- TukeyHSD(anova)
plot(tukey)
qt(.975, 2)
mean(stpackingmachine)
sqrt(.264)
50.1015 - (4.302653)*sqrt(.264)
50.1015 + (4.302653)*sqrt(.264)
dt(4.702, 26)
2*(1 - dt(4.702, 26))
2*(1 - pt(4.702, 26))
paritydata <- read.csv("~/GSCHOOL/Job Market Preparation/Self Teaching/Projects/Football/Teams/Cleaned Data/paritydata.csv")
View(paritydata)
attach(paritydata)
View(paritydata)
View(paritydata)
parityregressions.R
run parityregressions.R
#Parity Regressions
paritydata <- read.csv(file="paritydata.csv", head=TRUE, sep=",")
attach(paritydata)
post_cap_trend_diff <- year * salary_cap_era
#Approach 1: iid Normal errors
#####Win Percentage Regressions
#Model 1
winpct1 <- lm(formula = normed_winpct_parity ~
year, data = paritydata)
#Model 2
winpct2 <- lm(formula = normed_winpct_parity ~
year + salary_cap_era, data = paritydata)
#Model 3
winpct3 <- lm(formula = normed_winpct_parity ~ year + post_cap_trend_diff,
data = paritydata)
#Model 4
winpct4 <- lm(formula = normed_winpct_parity ~ year + salary_cap_era +
post_cap_trend_diff, data = paritydata)
#####Playoff Rating Regressions
#Model 1
playoff1 <- lm(formula = normed_pr_parity ~ year, data = paritydata)
#Model 2
playoff2 <- lm(formula = normed_pr_parity ~
year + salary_cap_era, data = paritydata)
#Model 3
playoff3 <- lm(formula = normed_pr_parity ~ year + post_cap_trend_diff,
data = paritydata)
#Model 4
playoff4 <- lm(formula = normed_pr_parity ~ year + salary_cap_era +
post_cap_trend_diff, data = paritydata)
summary(playoff1)
summary(winpct1)
#####Gini Coefficient Regressions
#Model 1
gini1 <- lm(formula = adapted_gini_coefficient ~ year, data = paritydata)
#Model 2
gini2 <- lm(formula = adapted_gini_coefficient  ~
year + salary_cap_era, data = paritydata)
#Model 3
gini3 <- lm(formula = adapted_gini_coefficient  ~ year +
post_cap_trend_diff, data = paritydata)
#Model 4
gini4 <- lm(formula = adapted_gini_coefficient  ~ year +
salary_cap_era + post_cap_trend_diff, data = paritydata)
summary(gini1)
summary(gini2)
summary(gini3)
summary(gini4)
plot(gini1)
plot(gini4)
plot(playoff1)
plot(winpct1)
install.packages("sandwich")
install.packages("lmtest")
lm
vcovHC
model$newse <- vcovHC(gini1)
library("sandwich", lib.loc="~/R/win-library/2.13")
library("lmtest", lib.loc="~/R/win-library/2.13")
require(sandwich)
require("sandwich")
require("lmtest")
model$newse<-vcovHC(gini1)
gini1$newse<-vcovHC(gini1)
coeftest(gini1, gini1$newse)
gini2$newse<-vcovHC(gini2, type="HC1")
coeftest(gini2, gini2$newse)
residuals(gini1)
install.packages("tseries")
library("tseries", lib.loc="~/R/win-library/2.13")
adf.test(residuals(gini1), alternative = c("stationary"), k = 3)
adf.test(residuals(gini1), alternative = c("stationary"), k = 2)
adf.test(adapted_gini_coefficient, alternative = c("stationary"), k = 2)
adf.test(adapted_gini_coefficient, alternative = c("stationary"), k = 3)
adf.test(residuals(winpct1), alternative = c("stationary"), k = 3)
adf.test(residuals(winpct1), alternative = c("stationary"), k = 2)
adf.test(normed_winpct_parity, alternative = c("stationary"), k = 2)
adf.test(normed_winpct_parity if year > 1966, alternative = c("stationary"), k = 2)
normed_winpct_parity
normed_winpct_parity[NA]
normed_winpct_parity
normed_winpct_parity[c(NA)]
is.na(normed_winpct_parity)
normed_winpct_parity[is.na(normed_winpct_parity)]
normed_winpct_parity[1, 48]
normed_winpct_parity[1:48]
normed_winpct_parity[1:47]
adf.test(normed_winpct_parity[1:47], alternative = c("stationary"), k = 2)
adf.test(normed_pr_parity[1:47], alternative = c("stationary"), k = 2)
adf.test(residuals(normed_pr_parity[1:47]), alternative = c("stationary"), k = 2)
residuals(normed_pr_parity[1:47])
normed_pr_parity[1:47]
adf.test(normed_pr_parity[1:47], alternative = c("stationary"), k = 2)
adf.test(residuals(playoff1), alternative = c("stationary"), k = 2)
install.packages("urca")
library("urca", lib.loc="~/R/win-library/2.13")
detach("package:urca", unload=TRUE)
library("urca", lib.loc="~/R/win-library/2.13")
detach("package:urca", unload=TRUE)
adf.test(normed_pr_parity[1:47])
adf.test(adapted_gini_coefficient)
adf.test(normed_pr_parity[1:47], k = 2)
adf.test(adatapted_gini_coefficient, k = 2)
adf.test(adapted_gini_coefficient, k = 2)
adf.test(adapted_gini_coefficient, k = 4)
y <- diffinv(x)
y
adf.test(y)
adf.test(adapted_gini_coefficient, k = 1)
adf.test(adapted_gini_coefficient, k = 2)
adf.test(adapted_gini_coefficient, k = 3)
adf.test(adapted_gini_coefficient, k = 4)
adf.test(adapted_gini_coefficient, k = 5)
adf.test(adapted_gini_coefficient, k = 6)
(12*(47/100)^.25)
47/100
.47*(.25)
.47^.25
adf.test(normed_pr_parity[1:47], k = 2)
adf.test(normed_pr_parity[1:47], k = 3)
adf.test(normed_pr_parity[1:47], k = 4)
adf.test(normed_pr_parity[1:47], k = 1)
adf.test(normed_pr_parity[1:47], k = 5)
adf.test(normed_pr_parity[1:47], k = 6)
install.packages("mFilter")
library("mFilter", lib.loc="~/R/win-library/2.13")
hpfilter(adapted_gini_coefficient)
hpfilter(adapted_gini_coefficient, freq = 10, type=c("lambda"))
mendy = hpfilter(adapted_gini_coefficient, freq = 10, type=c("lambda"))
typeof(mendy)
mendy
library("ggplot2", lib.loc="~/R/win-library/2.13")
qplot(mendy)
mendy(1)
mendy[1]
qplot(mendy[1])
typeof(mendy[1])
menjew = as.data.frame(mendy[1], mendy[2], mendy[3])
as.data.frame(mendy[1])
test = list(mendy[1], mendy[2], mendy[3])
test
mendy
mendy[0]
mendy[1]
mendy[2]
mendy[3]
mendy[4]
mendy[5]
mendy[6]
mendy[7]
mendy[8]
mendy[9]
mendy[10]
mendy
test = list(mendy[1], mendy[2], mendy[10])
test
sup = as.data.frame(test)
sup
mendy
sup
ggplot(data = sup)
ggplot(data = sup, aes(x = time, y = fuck))
ggplot(sup, aes(x = time, y = series, col = parity)) + geom_line()
sup.index
sup$newColumn <- 1
sup
sup$timeindex = 1:nrow(sup)
sup
rename(sup, c("cycle" = "Cycle", "trend" = "Trend", "x" = "Series"))
ggplot(sup, aes(x = timeindex, y = Series, col = mendy)) + geom_line()
testplot = ggplot(sup, aes(x = timeindex, y = Trend))
testplot
testplot + geom_line()
sup
sup <- rename(sup, c("cycle" = "Cycle", "trend" = "Trend", "x" = "Series"))
sup
testplot = ggplot(sup, aes(x = timeindex, y = Trend))
testplot + geom_line()
testplot = ggplot(sup, aes(x = timeindex, y = Trend, Series, Cycle))
testplot + geom_line()
install.packages("reshape")
library("reshape", lib.loc="~/R/win-library/2.13")
sup
testsup <- melt(sup, id = "timeindex")
testsup
ggplot(data = testsup, aes(x = timeindex, y = value, colour=variable)) + geom_line()
drops <- c("newColumn")
sup[,!(names(sup) %in% drops)]
sup = sup[,!(names(sup) %in% drops)]
testsup <- melt(sup, id = "timeindex")
ggplot(data = testsup, aes(x = timeindex, y = value, colour = variable)) + geom_line()
savehistory("~/GSCHOOL/Job Market Preparation/Self Teaching/Projects/Football/Teams/Cleaned Data/various useful commands.Rhistory")
